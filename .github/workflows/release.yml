name: Build and Release Cross-Platform

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: bitely
            package: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: bitely.exe
            package: zip
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: bitely
            package: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: bitely
            package: tar.gz

    steps:
      - name: 🧾 Checkout source
        uses: actions/checkout@v4

      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@1.75.0
        with:
          targets: ${{ matrix.target }}

      - name: 🛠️ Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev gcc libc6-dev libcurl4-openssl-dev

      - name: 🛠️ Install Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl@1.1 || true
          export PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig:$PKG_CONFIG_PATH"

      - name: 🔍 Inspect Project
        run: |
          echo "Rust version:"
          rustc --version
          echo "Cargo version:"
          cargo --version
          echo "Cargo.toml contents:"
          cat Cargo.toml || echo "Cargo.toml not found"
          echo "src/main.rs contents:"
          cat src/main.rs || echo "src/main.rs not found"
          echo "Directory contents:"
          ls -R

      - name: 🧹 Clean Build Cache
        run: cargo clean

      - name: 📦 Build Release Binary
        run: |
          cargo build --release --target ${{ matrix.target }} --no-default-features --verbose || {
            echo "Build failed, continuing to inspect"
            ls -l target/${{ matrix.target }}/release 2>/dev/null || echo "Release directory empty"
          }
        continue-on-error: true

      - name: 🔍 Check Build Output
        run: |
          echo "Release directory contents:"
          find target/${{ matrix.target }}/release -type f 2>/dev/null || echo "No files in release directory"

      - name: 🧪 Test Binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if [ -f "./target/${{ matrix.target }}/release/${{ matrix.artifact }}" ]; then
            ./target/${{ matrix.target }}/release/${{ matrix.artifact }} config
            ./target/${{ matrix.target }}/release/${{ matrix.artifact }} search --offline
          else
            echo "Binary not found, skipping tests"
            exit 0
          fi
        env:
          BITE_MODULES: ./test-modules

      - name: 🧪 Test Binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if (Test-Path "./target/${{ matrix.target }}/release/${{ matrix.artifact }}") {
            ./target/${{ matrix.target }}/release/${{ matrix.artifact }} config
            ./target/${{ matrix.target }}/release/${{ matrix.artifact }} search --offline
          } else {
            Write-Output "Binary not found, skipping tests"
            exit 0
          }
        env:
          BITE_MODULES: ./test-modules

      - name: 📦 Package (Linux/macOS)
        if: matrix.package == 'tar.gz'
        run: |
          if [ -f "./target/${{ matrix.target }}/release/${{ matrix.artifact }}" ]; then
            tar -C target/${{ matrix.target }}/release -czf bitely-v0.1.0-${{ matrix.target }}.${{ matrix.package }} ${{ matrix.artifact }}
            ls -l bitely-v0.1.0-${{ matrix.target }}.${{ matrix.package }} || echo "Package file not created"
          else
            echo "Skipping packaging: binary not found"
          fi

      - name: 📦 Package (Windows)
        if: matrix.package == 'zip'
        shell: pwsh
        run: |
          if (Test-Path "target/${{ matrix.target }}/release/${{ matrix.artifact }}") {
            Compress-Archive -Path target/${{ matrix.target }}/release/${{ matrix.artifact }} -DestinationPath bitely-v0.1.0-${{ matrix.target }}.${{ matrix.package }}
            dir bitely-v0.1.0-${{ matrix.target }}.${{ matrix.package }} || Write-Output "Package file not created"
          } else {
            Write-Output "Skipping packaging: binary not found"
          }

      - name: 📤 Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bitely-${{ matrix.target }}
          path: bitely-v0.1.0-${{ matrix.target }}.${{ matrix.package }}
          if-no-files-found: warn

      - name: 🚀 Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: bitely-v0.1.0-${{ matrix.target }}.${{ matrix.package }}
          body: |
            Bitely v0.1.0 for ${{ matrix.target }}.
            Install instructions:
            ${{ matrix.os == 'windows-latest' && '```powershell' || '```bash' }}
            curl -L https://github.com/Dangujba/bitely-registry/releases/download/v0.1.0/bitely-v0.1.0-${{ matrix.target }}.${{ matrix.package }} | ${{ matrix.package == 'tar.gz' && 'tar -xz -C /usr/local/bin' || 'Expand-Archive -DestinationPath $env:LOCALAPPDATA\\Programs\\Bitely' }}
            ${{ matrix.os == 'windows-latest' && '$env:Path += ";$env:LOCALAPPDATA\\Programs\\Bitely"' || '' }}
            ${{ matrix.os == 'windows-latest' && '[Environment]::SetEnvironmentVariable("Path", $env:Path, [EnvironmentVariableTarget]::User)' || '' }}
            ${{ matrix.os == 'windows-latest' && '```' || '```' }}
